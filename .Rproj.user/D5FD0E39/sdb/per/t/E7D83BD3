{
    "collab_server" : "",
    "contents" : "PlotBiplotGUI <- function(bip, HasClusters= FALSE, GraphWindow=FALSE, ppi=12, Toolkit = \"RGtk2\", ...) {\n  require(gWidgets)\n  options(guiToolkit = Toolkit)\n\n  plotBip <- function(...) {\n    margin = svalue(marg)\n    PlotRows = svalue(PlotR)\n    PlotCols = svalue(PlotC)\n    LabelRows = svalue(LabelR)\n    LabelCols = svalue(LabelC)\n    SizeR = svalue(LabelSizeR)\n    SizeC = svalue(LabelSizeC)\n    ShowBox = svalue(ShowBx)\n    MinQuIn = svalue(MinQI)\n    MinQuVa = svalue(MinQV)\n    mode = svalue(bmode, index = TRUE)\n    TYSC = svalue(vtype)\n    vva = svalue(vval)\n    SQI = svalue(SizeQI)\n    SQV = svalue(SizeQV)\n    CQI = svalue(ColorQI)\n    CQV = svalue(ColorQV)\n    A1 = svalue(ax1, index = TRUE)\n    A2 = svalue(ax2, index = TRUE)\n    n = dim(bip$Non_Scaled_Data)[1]\n    p = dim(bip$Non_Scaled_Data)[2]\n    WhatRows = matrix(0, n, 1)\n    WhatRows[svalue(RS, index = TRUE)] = 1\n    WhatCols = matrix(0, p, 1)\n    WhatCols[svalue(CS, index = TRUE)] = 1\n    DP = svalue(CP, index = TRUE)\n    RP = svalue(RP, index = TRUE)\n    PlCl = svalue(PlotClus)\n    TypeClus = svalue(ClTy, index = TRUE)\n    ClustConf = svalue(ClConf)\n    ClustCenters = svalue(PlotClusC)\n    UseClusterColors = svalue(UsClusC)\n\n    plot(bip, A1 = A1, A2 = A2, margin = margin, PlotInd = PlotRows, PlotVars = PlotCols, LabelInd = LabelRows,\n         LabelVars = LabelCols, CexInd = SizeR, CexVar = SizeC, ShowBox = ShowBox, MinQualityInds = MinQuIn,\n         MinQualityVars = MinQuVa, mode = mode, TypeScale = TYSC, ValuesScale = vva, SizeQualInd = SQI,\n         SizeQualVars = SQV, ColorQualInd = CQI, ColorQualVars = CQV, WhatInds = WhatRows, WhatVars = WhatCols,\n         dp = DP, PredPoints = RP, PlotClus = PlCl, TypeClus = TypeClus, ClustConf = ClustConf,\n         ClustCenters = ClustCenters, UseClusterColors = UseClusterColors)\n  }\n\n\n  # Función para añadir los clusters nuevos\n  AddClus <- function(...) {\n    ClusterType = svalue(TypeCl, index = TRUE)\n    NGroups = svalue(NumClus)\n    if (svalue(Original, index = TRUE)==1)\n      Orig=FALSE\n    else Orig=TRUE\n\n    if (ClusterType ==1){\n      method= svalue(MethodCl)\n      bip = AddCluster2Biplot(bip, ClusterType = ClusterType, NGroups = NGroups, method = method, Original=Orig)\n    }\n\n    if (ClusterType ==2){\n      algorithm= svalue(MethodCk)\n      bip = AddCluster2Biplot(bip, ClusterType = ClusterType, NGroups = NGroups, algorithm = algorithm, Original=Orig)\n    }\n\n    if (ClusterType ==3){\n      algorithm= svalue(MethodCk)\n      bip = AddCluster2Biplot(bip, ClusterType = ClusterType, NGroups = NGroups, Original=Orig)\n    }\n\n    if (ClusterType ==4){\n      Groups=bip$Factors[,svalue(FacSel, index=TRUE)]\n      bip = AddCluster2Biplot(bip, ClusterType = ClusterType, Groups = Groups)}\n    dispose(window)\n    PlotBiplotGUI(bip, HasClusters= TRUE)\n  }\n\n\n  n = dim(bip$Non_Scaled_Data)[1]\n  p = dim(bip$Non_Scaled_Data)[2]\n\n  window <- gwindow(\"Biplot Controler\")\n  notebook <- gnotebook(cont = window)\n  size(notebook) <- c(600, 600)\n\n  # -------------- Original data --------------------------------------------------------------\n  DataFrame <- ggroup(cont = notebook, label = gettext(\"Data\"), horizontal = FALSE)\n  Table <- gdf(bip$Non_Scaled_Data, container = DataFrame, expand = TRUE)\n\n  # ------------- Information about the biplot ----------------------------------------------------------\n  InfoFrame <- ggroup(cont = notebook, label = gettext(\"Biplot\"), horizontal = FALSE)\n  InCall = gframe(text = \"Call\", markup = FALSE, horizontal = TRUE, container = InfoFrame)\n  gedit(as.character(bip$call), container = InCall, col = \"Blue\")\n  InTran = gframe(text = \"Transformation of the data\", markup = FALSE, horizontal = TRUE, container = InfoFrame)\n  gedit(bip$Initial_Transformation, container = InTran)\n  InType = gframe(text = \"Type of coordinates:\", markup = FALSE, horizontal = TRUE, container = InfoFrame)\n  if (bip$alpha == 2)\n    tipo = \"Principal Normalization (HJ-Biplot) (Baricentric Scaling)\"\n  if (bip$alpha == 1)\n    tipo = \"Row Principal Normalization (RMP-Biplot)\"\n  if (bip$alpha == 0)\n    tipo = \"Column Principal Normalization (CMP-Biplot)\"\n  if (bip$alpha == 0.5)\n    tipo = \"Symmetrical Normalization (SQRT - Biplot)\"\n  if ((bip$alpha > 0) & (bip$alpha < 1) & (bip$alpha != 0.5))\n    tipo = paste(\"Custom Normalization (Biplot con \\alpha = \", gamma, \")\")\n  gedit(tipo, container = InType, width = 40)\n\n  InIner = gframe(text = \"Eigenvalues and Explained Variance (Inertia):\", markup = FALSE, horizontal = TRUE,\n                  container = InfoFrame)\n  pp = cbind(1:length(bip$EigenValues), bip$EigenValues, bip$Inertia, bip$CumInertia)\n  colnames(pp) = c(\"Axis\", \"Eigenvalue\", \"Explained Variance\", \"Cummulative\")\n  TabVarExp <- gtable(pp, container = InIner, expand = TRUE)\n  size(TabVarExp) <- c(400, 110)\n\n  InResults = gframe(text = \"Summary of Results\", markup = FALSE, horizontal = TRUE,\n                     container = InfoFrame)\n  obj <- gtext(\"\", container=InResults)\n  size(obj)<- c(490, 250)\n  txt=capture.output(summary(bip))\n  insert(obj,txt, font.attr=c(family=\"monospace\"))\n  SaveResButt <- gbutton(\"Save Results\", container = InResults, handler = function(h,...){\n    setfilename <- paste(gfile(text=\"Results.txt\", type=\"save\"), \".txt\", sep=\"\")\n    capture.output(summary(bip), file=setfilename)\n  })\n\n  # ------------------  Group for the Contributions -----------------------------------------------------\n  CotribFrame <- ggroup(cont = notebook, label = gettext(\"Contributions\"), horizontal = FALSE)\n  TabCont = glayout(container = CotribFrame)\n  TabCont[1, 1] <- \"Rows\"\n  TabCont[2, 1] = (ContRow <- gbutton(\"Show Row Qualities\", container = TabCont, handler = function(...) {\n    A1=svalue(ax1, index = TRUE)\n    A2=svalue(ax2,  index = TRUE)\n    matcon=cbind(bip$RowContributions[,c(A1,A2)], bip$RowContributions[,A1]+bip$RowContributions[,A2] )\n    colnames(matcon)[3]=\"Sum\"\n    GeneralTable(Title=\"Row Qualities\", Data = matcon)\n  }))\n\n  TabCont[3, 1] <- (TabRowContr <- gdf(bip$RowContributions, container = TabCont, expand = TRUE))\n  size(TabRowContr) <- c(200, 400)\n\n  TabCont[1, 2] <- \"Columns\"\n  TabCont[2, 2] <- (ContRow <- gbutton(\"Show Column Qualities\", container = TabCont, handler = function(...) {\n    A1=svalue(ax1, index = TRUE)\n    A2=svalue(ax2, index = TRUE)\n    matcon=cbind(bip$ColContributions[,c(A1,A2)], bip$ColContributions[,A1]+bip$ColContributions[,A2] )\n    colnames(matcon)[3]=\"Sum\"\n    GeneralTable(Title=\"Column Qualities\", Data = matcon)\n  }))\n  TabCont[3, 2] <- (TabColContr <- gdf(bip$ColContributions, container = TabCont, expand = TRUE))\n  size(TabColContr) <- c(200, 400)\n\n  # -------------------- Group for main characteristics of the plot -------------------------------------\n  Disp <- ggroup(cont = notebook, label = gettext(\"Display\"), horizontal = FALSE)\n\n  AxisFrame = gframe(text = \"Dimensions to Plot\", markup = FALSE, horizontal = TRUE, container = Disp)\n  gp00 = ggroup(container = AxisFrame)\n  lb=glabel(\"Dimension in Axis X:\", container = gp00)\n  # font(lb) <- list(family=\"times\",size=12, weight=\"bold\",style=\"italic\", clor=\"red\")\n\n  flavors = 1:bip$dim\n  ax1 <- gcombobox(flavors, editable = FALSE, container = gp00, handler = plotBip)\n  svalue(ax1, index = TRUE) <- 1\n\n  gp01 = ggroup(container = AxisFrame)\n  glabel(\"Dimension in Axis Y:\", container = gp01)\n  ax2 <- gcombobox(flavors, editable = FALSE, container = gp01, handler = plotBip)\n  svalue(ax2, index = TRUE) <- 2\n\n\n  PlotFrame = gframe(text = \"What to Plot\", markup = FALSE, horizontal = FALSE, container = Disp)\n  tbl = glayout(container = PlotFrame)\n  size(tbl) <- c(400, 30)\n  tbl[1, 1] <- (PlotR <- gcheckbox(\"Individuals\", container = tbl, handler = plotBip))\n  svalue(PlotR) <- TRUE\n  size(PlotR) <- c(150, 20)\n  tbl[1, 2] <- (PlotC <- gcheckbox(\"Variables\", container = tbl, handler = plotBip))\n  svalue(PlotC) <- TRUE\n  size(PlotC) <- c(150, 20)\n\n  LabelFrame = gframe(text = \"Label\", markup = FALSE, horizontal = FALSE, container = Disp)\n  tbl2 = glayout(container = LabelFrame)\n  size(tbl2) <- c(400, 30)\n  tbl2[1, 1] <- (LabelR <- gcheckbox(\"Individuals\", container = tbl2, handler = plotBip))\n  svalue(LabelR) <- TRUE\n  size(LabelR) <- c(150, 20)\n  tbl2[1, 2] <- (LabelC <- gcheckbox(\"Variables\", container = tbl2, handler = plotBip))\n  svalue(LabelC) <- TRUE\n  size(LabelC) <- c(150, 20)\n\n  LabelSizeFrame = gframe(text = \"Size\", markup = FALSE, horizontal = FALSE, container = Disp)\n  tbl3 = glayout(container = LabelSizeFrame)\n  size(tbl3) <- c(400, 30)\n  tbl3[1, 1] <- \"Individuals: \"\n  tbl3[1, 2] <- (LabelSizeR <- gspinbutton(from = 0.1, to = 2, by = 0.1, value = 1, container = tbl3, handler = plotBip))\n  tbl3[1, 3] <- \"Variables: \"\n  tbl3[1, 4] <- (LabelSizeC <- gspinbutton(from = 0.1, to = 2, by = 0.1, value = 1, container = tbl3, handler = plotBip))\n\n  MarginFrame = gframe(text = \"Margin\", markup = FALSE, horizontal = FALSE, container = Disp)\n  tbl4 = glayout(container = MarginFrame)\n  tbl4[1, 1] <- (marg <- gspinbutton(from = 0, to = 0.3, by = 0.05, value = 0, container = tbl4, handler = plotBip))\n  size(marg) <- c(100, 20)\n  tbl4[1, 2] <- (ShowAx <- gcheckbox(\"Show Axis\", container = tbl4, handler = plotBip))\n  svalue(ShowAx) <- FALSE\n  size(ShowAx) <- c(100, 20)\n  tbl4[1, 3] <- (ShowBx <- gcheckbox(\"Show Box\", container = tbl4, handler = plotBip))\n  svalue(ShowBx) <- FALSE\n  size(ShowBx) <- c(100, 20)\n\n  ModeFrame = gframe(text = \"Variables Mode on the Biplot\", markup = FALSE, horizontal = FALSE, container = Disp)\n  modes = c(\"Points\", \"Arrows\", \"Both ends\", \"Half line\", \"Half Line & Arrow\", \"Calibrated Axis\")\n  gp = ggroup(container = ModeFrame)\n  glabel(\"Variables Mode:\", container = gp)\n  bmode <- gcombobox(modes, editable = FALSE, container = gp, handler = plotBip)\n  svalue(bmode, index = TRUE) <- 2\n\n  gp2 = ggroup(container = ModeFrame)\n  types = c(\"Complete\", \"Standard Deviation\", \"Box Plot\")\n  glabel(\"Type of Scale:\", container = gp2)\n  vtype <- gcombobox(types, editable = FALSE, container = gp2, handler = plotBip)\n  svalue(vtype, index = TRUE) <- 1\n\n  gp3 = ggroup(container = ModeFrame)\n  vals = c(\"Original\", \"Transformed\")\n  glabel(\"Values on the Scale:\", container = gp3)\n  vval <- gcombobox(vals, editable = FALSE, container = gp3, handler = plotBip)\n  svalue(vval, index = TRUE) <- 1\n\n\n  # ------------------ LIST OF INDIVIDUALS AND VARIABLES PLOTTED ON THE PLOT --------------------------\n  PlottedFrame <- ggroup(cont = notebook, label = gettext(\"Plotted\"), horizontal = TRUE)\n  TS = glayout(container = PlottedFrame)\n  TS[1, 1] <- \"Rows\"\n  TS[2, 1] = (SAR <- gbutton(\"Select All\", container = TS, handler = function(...) {\n    svalue(RS) = rep(TRUE, n)\n    plotBip()\n  }))\n  TS[3, 1] = (RAR <- gbutton(\"Remove All\", container = TS, handler = function(...) {\n    svalue(RS) = rep(FALSE, n)\n    plotBip()\n  }))\n  TS[4, 1] <- (RS <- gcheckboxgroup(rownames(bip$Non_Scaled_Data), container = TS, handler = plotBip, use.table = TRUE))\n  size(RS) <- c(200, 400)\n  svalue(RS) = rep(TRUE, n)\n  TS[1, 2] <- \"Columns\"\n  TS[2, 2] = (SAC <- gbutton(\"Select All\", container = TS, handler = function(...) {\n    svalue(CS) = rep(TRUE, n)\n    plotBip()\n  }))\n  TS[3, 2] = (RAC <- gbutton(\"Remove All\", container = TS, handler = function(...) {\n    svalue(CS) = rep(FALSE, n)\n    plotBip()\n  }))\n  TS[4, 2] <- (CS <- gcheckboxgroup(colnames(bip$Non_Scaled_Data), container = TS, handler = plotBip, use.table = TRUE))\n  size(CS) <- c(200, 400)\n  svalue(CS) = rep(TRUE, p)\n\n  ProjFrame <- ggroup(cont = notebook, label = gettext(\"Projected\"), horizontal = TRUE)\n  TP = glayout(container = ProjFrame)\n  TP[1, 1] <- \"Rows\"\n  TP[2, 1] <- (RP <- gcheckboxgroup(rownames(bip$Non_Scaled_Data), container = TP, handler = plotBip, use.table = TRUE))\n  size(RP) <- c(200, 400)\n  svalue(RP) = rep(FALSE, n)\n  TP[1, 2] <- \"Columns\"\n  TP[2, 2] <- (CP <- gcheckboxgroup(colnames(bip$Non_Scaled_Data), container = TP, handler = plotBip, use.table = TRUE))\n  size(CP) <- c(200, 400)\n  svalue(CP) = rep(FALSE, p)\n\n  # ------------- MANAGES HOW THE QUALITIES ARE REPRESENTED ON THE PLOT -------------\n  Qualities <- ggroup(cont = notebook, label = gettext(\"Qualities\"), horizontal = FALSE)\n  QualIndFrame = gframe(text = \"Individuals\", markup = FALSE, horizontal = FALSE, container = Qualities)\n  tbl5 = glayout(container = QualIndFrame)\n  tbl5[1, 1] <- \"Minimum quality to plot :    \"\n  tbl5[1, 2] <- (MinQI <- gspinbutton(from = 0, to = 1, by = 0.1, value = 0, container = tbl5, handler = plotBip))\n  size(MinQI) <- c(100, 20)\n  tbl5[2, 1] <- (SizeQI <- gcheckbox(\"Sizes by quality\", container = tbl5, handler = plotBip))\n  svalue(SizeQI) <- FALSE\n  tbl5[3, 1] <- (ColorQI <- gcheckbox(\"Colors by quality\", container = tbl5, handler = plotBip))\n  svalue(ColorQI) <- FALSE\n\n  QualVarFrame = gframe(text = \"Variables\", markup = FALSE, horizontal = FALSE, container = Qualities)\n  tbl6 = glayout(container = QualVarFrame)\n  tbl6[1, 1] <- \"Minimum quality to plot :    \"\n  tbl6[1, 2] <- (MinQV <- gspinbutton(from = 0, to = 1, by = 0.1, value = 0, container = tbl6, handler = plotBip))\n  size(MinQV) <- c(100, 20)\n  tbl6[2, 1] <- (SizeQV <- gcheckbox(\"Sizes by quality\", container = tbl6, handler = plotBip))\n  svalue(SizeQV) <- FALSE\n  tbl6[3, 1] <- (ColorQV <- gcheckbox(\"Colors by quality\", container = tbl6, handler = plotBip))\n  svalue(ColorQV) <- FALSE\n\n  # -------------------   PLOTTING CLUSTERS ON THE BIPOT -----------------------------------------------------\n  Clusters <- ggroup(cont = notebook, label = gettext(\"Clusters\"), horizontal = FALSE)\n\n  PlotCFrame = gframe(text = \"Plot Clusters\", markup = FALSE, horizontal = FALSE, container = Clusters)\n  PlotClus <- gcheckbox(\"Display Clusters\", container = PlotCFrame, handler = plotBip)\n  if (HasClusters)\n    svalue(PlotClus) <- TRUE\n  else\n    svalue(PlotClus) <- FALSE\n\n  PlotClusC <- gcheckbox(\"Plot Cluster Centers\", container = PlotCFrame, handler = plotBip)\n  svalue(PlotClusC) <- FALSE\n  UsClusC <- gcheckbox(\"Use Cluster Colors\", container = PlotCFrame, handler = plotBip)\n  svalue(UsClusC) <- FALSE\n\n\n  TypeCFrame = gframe(text = \"Type of Clusters Plot\", markup = FALSE, horizontal = FALSE, container = Clusters)\n  types = c(\"Convex Hull\", \"Ellipse\", \"Star\")\n  ClTy <- gcombobox(types, editable = FALSE, container = TypeCFrame, handler = plotBip)\n\n\n  ConfCFrame = gframe(text = \"Confidence\", markup = FALSE, horizontal = FALSE, container = Clusters)\n  ClConf <- gspinbutton(from = 0, to = 1, by = 0.05, value = 1, container = ConfCFrame, handler = plotBip)\n  svalue(ClConf) <- 1\n\n  # -------------------   ADDING CLUSTERS TO THE BIPOT -----------------------------------------------------\n  NewCluster = gframe(text = \"Add New Clusters\", markup = FALSE, horizontal = FALSE, container = Clusters)\n  NCL1 = ggroup(container = NewCluster)\n  types = c(\"Hierarchical\", \"K-Means\", \"Gaussian Mixture\", \"User Provided\")\n  glabel(\"Types of Cluster\", container = NCL1)\n  TypeCl <- gcombobox(types, editable = FALSE, container = NCL1)\n  svalue(TypeCl, index = TRUE) <- 1\n  NCL2 = ggroup(container = NewCluster)\n  glabel(\"Number of Groups:\", container = NCL2)\n  NumClus <- gspinbutton(from = 2, to = 15, by = 1, value = 3, container = NCL2)\n  NCL3 = ggroup(container = NewCluster)\n  glabel(\"Method for Hierarchical Clustering\", container = NCL3)\n  clt = c(\"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\")\n  MethodCl <- gcombobox(clt, editable = FALSE, container = NCL3)\n  svalue(MethodCl, index = TRUE) <- 2\n\n  NCL4 = ggroup(container = NewCluster)\n  glabel(\"Method for K-Means Clustering\", container = NCL4)\n  algorithm = c(\"Hartigan-Wong\", \"Lloyd\", \"Forgy\", \"MacQueen\")\n  MethodCk <- gcombobox(algorithm, editable = FALSE, container = NCL4)\n  svalue(MethodCk, index = TRUE) <- 2\n\n  NCL5 = ggroup(container = NewCluster)\n  glabel(\"Cluster with :\", container = NCL5)\n  cldat=c(\"Biplot Coordinates\", \"Original Data\")\n  Original <- gradio(cldat, container=NCL5)\n\n\n  if (!is.null(bip$Factors)){\n    FactorsFrame = ggroup(container = NewCluster)\n    glabel(\"Factors for Clustering\", container = FactorsFrame)\n    FacSel <- gcheckboxgroup(colnames(bip$Factors), container = FactorsFrame, use.table = TRUE)\n    size(FacSel) <- c(400, 100)\n    Selection <- rep(FALSE, length(bip$Factors))\n    Selection[1] <- TRUE\n    svalue(FacSel) = Selection\n  }\n\n  ClusButt <- gbutton(\"Add Clusters\", container = NewCluster, handler = AddClus)\n  font(ClusButt) <- list(size=18, weight=\"bold\",style=\"italic\", color=\"red\")\n\n  if (HasClusters){\n    svalue(ClTy, index = TRUE)<-1\n    svalue(notebook) <- 8}\n  else\n    svalue(notebook) <- 2\n\n\n  if (GraphWindow){\n    GraphTab = ggroup(cont = notebook, label = gettext(\"Plot\"), horizontal = FALSE)\n    Grafico<-ggraphics(ps=ppi,container=GraphTab)\n    addHandlerClicked ( Grafico , handler = function ( h , ... ) {\n      cat ( sprintf ( \"You clicked %.2f x %.2f\\n\" , h$x , h$y ) )\n    } )\n  }\n  #addHandlerChanged ( Grafico , handler = PlotBip)\n\n  plotBip()\n}\n",
    "created" : 1476428172386.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "363|19|369|2|\n",
    "hash" : "605262207",
    "id" : "E7D83BD3",
    "lastKnownWriteTime" : 1476397389,
    "last_content_update" : 1476429001253,
    "path" : "~/Dropbox/0 ProgramasR/Paquetes/MultBiplotRGUI/R/PlotBiplotGUI.R",
    "project_path" : "R/PlotBiplotGUI.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}