{
    "collab_server" : "",
    "contents" : "ScatterGUI <- function(X,Toolkit = \"tcltk\", ...) {\n  options(guiToolkit = Toolkit)\n\n  DoExplore <- function(...){\n    XX= X2[,svalue(CS, index=TRUE)]\n\n    FacSel=svalue(CS1, index=TRUE)\n    if (length(svalue(CS1, index=TRUE))==1)\n    { groups=X3[,svalue(CS1, index=TRUE)]}\n    else {\n      if (length(svalue(CS1, index=TRUE))==0)\n      {groups=as.factor(rep(1, dim(XX)[1]))\n      levels(groups)<- \"Complete Sample\"}\n      else\n        groups=as.factor(paste(X3[,FacSel[1]],X3[,FacSel[2]], sep=\"-\"))\n    }\n\n    if (svalue(rb, index=TRUE) ==1) SortByGroups=TRUE\n    else SortByGroups=FALSE\n\n    if (svalue(Descrip)){\n      DESC=BasicDescription(XX,groups, SortByGroups=SortByGroups, Intervals=svalue(Interval))\n      txt=capture.output(DESC)\n      GeneralResults(title=\"Descriptive Exploration\", text=txt, Toolkit=Toolkit)}\n\n    if (svalue(StemandLeaf)){\n      StPlots=StemPlots(XX,groups, SortByGroups=SortByGroups)\n      txt2=capture.output(StPlots)\n      GeneralResults(title=\"Descriptive Exploration\", text=txt2, Toolkit=Toolkit)}\n\n    if (svalue(Boxplot)){\n      if (svalue(rb3, index=TRUE)==1)\n        GroupsTogether=TRUE\n      else\n        GroupsTogether=FALSE\n      print(svalue(Nrows))\n      BoxPlotPanel(XX, groups=groups, nrows=svalue(Nrows), panel=svalue(Panel), notch=svalue(Notched), GroupsTogether=GroupsTogether)\n    }\n\n    if (svalue(Errplot)){\n      if (svalue(rb3, index=TRUE)==1)\n        GroupsTogether=TRUE\n      else\n        GroupsTogether=FALSE\n      ErrorBarPlotPanel(XX, groups=groups, nrows=svalue(Nrows), panel=svalue(Panel), GroupsTogether=GroupsTogether )\n    }\n\n  }\n\n\n  HandleFactors <- function(...){\n    Selected = svalue(CS1, index=TRUE)\n    if (length(Selected)>2){\n      svalue(CS1, index=TRUE)=Selected[1:2]\n      gmessage(\"No more than two factor can be selected at a time\")\n    }\n  }\n\n\n\n  TitWin=\"Scattergrams\"\n\n\n  window <- gwindow(TitWin, width = 600, height = 600)\n  notebook <- gnotebook(container = window, expand=TRUE)\n\n\n  # ----------------- Data -------------------------------------\n  DataFrame <- ggroup(container = notebook, label = gettext(\"Numeric Data\"), horizontal = FALSE)\n  Classes=sapply(X,class)\n  Numeric=which(Classes==\"numeric\")\n  X2=X[,Numeric]\n  Table <- gdf(X2, container = DataFrame, expand = TRUE)\n\n\n  # ---------------- Controls the active elements for the construction of the biplot --------------\n\n  DepCols <- function(...){\n    Selected=rep(FALSE, dim(X2)[2])\n    Selected[svalue(CS2, index=TRUE)]=TRUE\n    Selected[svalue(CS, index=TRUE)]=FALSE\n    svalue(CS2)=Selected\n  }\n\n  IndepCols <- function(...){\n    Selected=rep(FALSE, dim(X2)[2])\n    Selected[svalue(CS, index=TRUE)]=TRUE\n    Selected[svalue(CS2, index=TRUE)]=FALSE\n    svalue(CS)=Selected\n  }\n\n\n  VarsFrame <- ggroup(container = notebook, label = gettext(\"Variables\"), horizontal = TRUE)\n\n  # ----------------- Variables selected for the analysis -------------------------------------\n  DepFrame = gframe(text = \"Dependent\", markup = FALSE, horizontal = FALSE, container = VarsFrame)\n  CS <- gcheckboxgroup(colnames(X2), container = DepFrame, use.table = TRUE, handler = DepCols)\n  svalue(CS) = rep(FALSE, dim(X2)[2])\n  size(CS) <- c(220, 400)\n\n  # ---------------- Controls the supplementary elements for the construction of the biplot --------------\n  IndepFrame = gframe(text = \"Independent\", markup = FALSE, horizontal = FALSE, container = VarsFrame)\n  CS2 <- gcheckboxgroup(colnames(X2), container = IndepFrame, use.table = TRUE, handler = IndepCols)\n  svalue(CS2) = rep(FALSE, dim(X2)[2])\n  size(CS2) <- c(220, 400)\n\n  # ----------------- Descriptive Exploration -------------------------------------\n  AnalysisDef <- ggroup(container = notebook, label = gettext(\"Scatter Plots\"), horizontal = FALSE)\n  StatFrame = gframe(text = \"Statistics\", markup = FALSE, horizontal = FALSE, container = AnalysisDef)\n  gp1 <- ggroup(container=StatFrame)\n  Correlations <- gcheckbox(\"Correlations   \", container = gp1)\n  svalue(Correlations) <- TRUE\n  Regressions <- gcheckbox(\"Simple Regressions   \", container = gp1)\n  svalue(Regressions) <- TRUE\n  sorts <- c(\"Sort by Dependents\", \"Sort by Independents\")\n  gp <- ggroup(container=StatFrame)\n  glabel(\"Organize output:\",container=gp, anchor=c(0,1))\n  rb <- gradio(sorts, container=gp)\n  svalue(rb, index = TRUE) <- 2\n\n\n  DescPlotFrame = gframe(text = \"Plots Panels\", markup = FALSE, horizontal = FALSE, container = AnalysisDef)\n  Scatter <- gcheckbox(\"Simple Scattergram\", container = DescPlotFrame)\n  svalue(Scatter) <- FALSE\n  ScatterLin <- gcheckbox(\"Scattergram with Linear Fit\", container = DescPlotFrame)\n  svalue(ScatterLin) <- FALSE\n  ScatterLoess <- gcheckbox(\"Scattergram with LOWESS (LOESS)\", container = DescPlotFrame)\n  svalue(ScatterLoess) <- FALSE\n  ScatterKernel <- gcheckbox(\"Scattergram with kernell Smoothing\", container = DescPlotFrame)\n  svalue(ScatterKernel) <- FALSE\n  ScatterSplines <- gcheckbox(\"Scattergram with Cubic Splines\", container = DescPlotFrame)\n  svalue(ScatterSplines) <- FALSE\n\n  LoessPlotFrame = gframe(text = \"LOESS Parameters\", markup = FALSE, horizontal =FALSE , container = AnalysisDef)\n  T1 = ggroup(container = LoessPlotFrame , horizontal =TRUE)\n  glabel(text=\"Degree of Smoothing (smoothness parameter) \", container = T1)\n  Span <- gspinbutton( from = 0, to = 1, by = 0.05, value = 0.5, container = T1)\n  svalue(Span) <- 0.5\n  T2 = ggroup(container = LoessPlotFrame , horizontal =TRUE)\n  glabel(text=\"Degree of Local Polinomial \", container = T2)\n  Degree <- gspinbutton( from = 0, to = 10, by = 1, value = 1, container = T2)\n  svalue(Degree) <- 1\n  T3 = ggroup(container = LoessPlotFrame , horizontal =TRUE)\n  glabel(text=\"Family \", container = T3)\n  families = c(\"Gaussian\", \"Symmetric\")\n  Family <- gcombobox(families, editable = FALSE, container = T3)\n\n  KernelFrame = gframe(text = \"Kernell Smoothing Parameters (KernSmooth package)\", markup = FALSE, horizontal =FALSE , container = AnalysisDef)\n  T1k = ggroup(container = KernelFrame , horizontal =TRUE)\n  glabel(text=\"Band Width (smoothness parameter) \", container = T1k)\n  BandWidth <- gspinbutton( from = 0, to = 1, by = 0.05, value = 0.5, container = T1k)\n  svalue(BandWidth) <- 0.5\n  T2k = ggroup(container = KernelFrame , horizontal =TRUE)\n  glabel(text=\"Degree of Local Polinomial \", container = T2k)\n  DegreeK <- gspinbutton( from = 0, to = 10, by = 1, value = 1, container = T2k)\n  svalue(DegreeK) <- 1\n  T3k = ggroup(container = KernelFrame , horizontal =TRUE)\n  glabel(text=\"Kernel  \", container = T3k)\n  kernels = c(\"normal\", \"box\", \"epanech\", \"biweight\", \"triweight\")\n  Kelnel <- gcombobox(kernels, editable = FALSE, container = T3k)\n\n  RunFrame <- ggroup(container = notebook, label = gettext(\"Run Analysis\"), horizontal = FALSE)\n  PanelFrame = gframe(text = \"Number of rows in panels\", markup = FALSE, horizontal = TRUE, container = RunFrame)\n  Nrows <- gspinbutton(from = 1, to = 10, by = 1, value = 3, container = RunFrame)\n  svalue(Nrows) <- 4\n\n  RunButt <- gbutton(\"Run\", container = RunFrame, handler = DoExplore)\n  font(RunButt) <- list(family=\"times\",size=18, weight=\"bold\",style=\"italic\", color=\"red\")\n  size(RunButt) <- c(100, 50)\n\n  svalue(notebook) <- 2\n}\n",
    "created" : 1490949767669.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2052595552",
    "id" : "47DB9416",
    "lastKnownWriteTime" : 1490960254,
    "last_content_update" : 1490960254671,
    "path" : "~/Dropbox/0 ProgramasR/Paquetes/MultBiplotRGUI/R/ScatterGUI.R",
    "project_path" : "R/ScatterGUI.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 13,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}