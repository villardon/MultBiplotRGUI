{
    "collab_server" : "",
    "contents" : "UnivariateGUI <- function(X, Tab= 4, Toolkit = \"tcltk\", ...) {\n  options(guiToolkit = Toolkit)\n\n  DoExplore <- function(...){\n    XX= X2[,svalue(CS, index=TRUE)]\n\n    FacSel=svalue(CS1, index=TRUE)\n    if (length(svalue(CS1, index=TRUE))==1)\n    { groups=X3[,svalue(CS1, index=TRUE)]}\n    else {\n      if (length(svalue(CS1, index=TRUE))==0)\n      {groups=as.factor(rep(1, dim(XX)[1]))\n      levels(groups)<- \"Complete Sample\"}\n      else\n        groups=as.factor(paste(X3[,FacSel[1]],X3[,FacSel[2]], sep=\"-\"))\n    }\n\n    if (svalue(rb, index=TRUE) ==1) SortByGroups=TRUE\n    else SortByGroups=FALSE\n\n    if (svalue(Descrip)){\n      DESC=BasicDescription(XX,groups, SortByGroups=SortByGroups, Intervals=svalue(Interval))\n      txt=capture.output(DESC)\n      GeneralResults(title=\"Descriptive Exploration\", text=txt, Toolkit=Toolkit)}\n\n    if (svalue(StemandLeaf)){\n      StPlots=StemPlots(XX,groups, SortByGroups=SortByGroups)\n      txt2=capture.output(StPlots)\n      GeneralResults(title=\"Descriptive Exploration\", text=txt2, Toolkit=Toolkit)}\n\n    if (svalue(Boxplot)){\n      if (svalue(rb3, index=TRUE)==1)\n        GroupsTogether=TRUE\n      else\n        GroupsTogether=FALSE\n      print(svalue(Nrows))\n      BoxPlotPanel(XX, groups=groups, nrows=svalue(Nrows), panel=svalue(Panel), notch=svalue(Notched), GroupsTogether=GroupsTogether)\n    }\n\n    if (svalue(Errplot)){\n      if (svalue(rb3, index=TRUE)==1)\n        GroupsTogether=TRUE\n      else\n        GroupsTogether=FALSE\n      ErrorBarPlotPanel(XX, groups=groups, nrows=svalue(Nrows), panel=svalue(Panel), GroupsTogether=GroupsTogether )\n    }\n\n  }\n\n  DoCompare <- function(...){\n\n    require(car)\n\n    Results=list()\n    ResultsNames=character()\n    k=0\n\n    XX= X2[,svalue(CS, index=TRUE)]\n    FacSel=svalue(CS1, index=TRUE)\n    if (length(svalue(CS1, index=TRUE))==1)\n    { groups=X3[,svalue(CS1, index=TRUE)]}\n    else {\n      if (length(svalue(CS1, index=TRUE))==0)\n      {groups=as.factor(rep(1, dim(XX)[1]))\n      levels(groups)<- \"Complete Sample\"}\n      else\n        groups=as.factor(paste(X3[,FacSel[1]],X3[,FacSel[1]], sep=\"-\"))\n    }\n\n    if (svalue(NormTest)){\n    txt=capture.output(cat(\"\\n###### NORMALITY TESTS  #######\\n\\n\"))\n    txt2=capture.output(NormalityTests(XX, groups, plot=svalue(NormPlot)))\n    txt=c(txt, txt2)\n    k=k+1\n    Results[[k]]=txt\n    ResultsNames[k]=\"Normality\"\n    }\n\n    if (svalue(BartTest) | svalue(LevTest)){\n    txt=capture.output(cat(\"\\n###### EQUALITY OF VARIANCES  #######\\n\"))\n    if (svalue(LevTest)){\n    txt=c(txt, capture.output(cat(\"\\nLevene's Test\\n\")))\n    txt2=capture.output(Levene.Tests(XX, groups))\n    txt=c(txt, txt2)}\n\n    if (svalue(BartTest)){\n    txt=c(txt, capture.output(cat(\"\\nBartlett's Test\\n\")))\n    txt2=capture.output(Bartlett.Tests(XX, groups))\n    txt=c(txt, txt2)}\n    k=k+1\n    Results[[k]]=txt\n    ResultsNames[k]=\"Variances Equality\"\n    }\n\n    if (svalue(ParamTest)){\n      txt=capture.output(cat(\"\\n\\n**************** PARAMETRIC TESTS **************** \\n\"))\n      txt2=ANOVA.Tests(XX, groups, posthoc=svalue(PHT), alternative=\"two.sided\")\n      txt=c(txt, txt2)\n      k=k+1\n      Results[[k]]=txt\n      ResultsNames[k]=\"Parametric Comparisons\"\n      }\n\n    if (svalue(NonParamTest)){\n      txt=capture.output(cat(\"\\n\\n**************** NON-PARAMETRIC TESTS **************** \\n\"))\n      txt2=Kruskal.Wallis.Tests(XX, groups, posthoc=svalue(PHT2))\n      txt=c(txt, txt2)\n      k=k+1\n      Results[[k]]=txt\n      ResultsNames[k]=\"Non-Parametric Comparisons\"}\n\n      names(Results)=ResultsNames\n      GeneralResults(title=\"Compare Groups\", text=Results, Toolkit=Toolkit)\n\n      if (svalue(Errplot2)){\n        ErrorBarPlotPanel(XX, groups=groups, nrows=svalue(Nrows), panel=T, GroupsTogether=TRUE, p.adjust.method=svalue(adjpgraph), UseANOVA=TRUE)\n      }\n  }\n\n  HandleFactors <- function(...){\n    Selected = svalue(CS1, index=TRUE)\n    if (length(Selected)>2){\n      svalue(CS1, index=TRUE)=Selected[1:2]\n      gmessage(\"No more than two factor can be selected at a time\")\n    }\n  }\n\n  if (Tab==4)\n    TitWin=\"Descriptive Exploration\"\n  else\n    TitWin=\"Means Comparison\"\n\n  window <- gwindow(TitWin, width = 600, height = 600)\n  notebook <- gnotebook(container = window, expand=TRUE)\n\n\n  # ----------------- Data -------------------------------------\n  DataFrame <- ggroup(container = notebook, label = gettext(\"Numeric Data\"), horizontal = FALSE)\n  Classes=sapply(X,class)\n  Numeric=which(Classes==\"numeric\")\n  X2=X[,Numeric]\n  Table <- gdf(X2, container = DataFrame, expand = TRUE)\n\n  # ----------------- External Data -------------------------------------\n  NoNumeric=which(Classes!=\"numeric\")\n  if (length(NoNumeric)>0){\n    SupDataFrame <- ggroup(container = notebook, label = gettext(\"Categorical Data\"), horizontal = FALSE)\n    X3=as.data.frame(X[,NoNumeric])\n    colnames(X3) <-colnames(X)[NoNumeric]\n    Table <- gdf(X3, container = SupDataFrame, expand = TRUE)\n  }\n\n  # ----------------- Variables selected for the analysis -------------------------------------\n  ActiveFrame <- ggroup(container = notebook, label = gettext(\"Variables\"), horizontal = TRUE)\n  TS = gframe(text=\"Numeric Variables\", markup = FALSE, horizontal = FALSE, container = ActiveFrame)\n\n  CS <- gcheckboxgroup(colnames(X2), container = TS, use.table = FALSE)\n  if (Toolkit == \"RGtk2\") size(CS) <- c(220, 400)\n  svalue(CS) = rep(TRUE, dim(X2)[2])\n\n  if (length(NoNumeric)>0){\n    TS1 = gframe(text=\"Categorical Variables\", markup = FALSE, horizontal = FALSE, container = ActiveFrame)\n    CS1 <- gcheckboxgroup(colnames(X3), container = TS1, use.table = FALSE, handler=HandleFactors)\n    if (Toolkit == \"RGtk2\") size(CS1) <- c(220, 180)\n    Sel=rep(FALSE, dim(X3)[2])\n    Sel[1]=TRUE\n    svalue(CS1) = Sel\n  }\n\n  # ----------------- Descriptive Exploration -------------------------------------\n  AnalysisDef <- ggroup(container = notebook, label = gettext(\"Explore\"), horizontal = FALSE)\n  StatFrame = gframe(text = \"Statistics\", markup = FALSE, horizontal = FALSE, container = AnalysisDef)\n  gp1 <- ggroup(container=StatFrame)\n  Descrip <- gcheckbox(\"Descriptives   \", container = gp1)\n  svalue(Descrip) <- TRUE\n  Interval <- gcheckbox(\"Confidence intervals\", container = gp1)\n  svalue(Interval) <- TRUE\n  sorts <- c(\"Sort by Groups\", \"Sort by Variables\")\n  gp <- ggroup(container=StatFrame)\n  glabel(\"Organize output:\",container=gp, anchor=c(0,1))\n  rb <- gradio(sorts, container=gp)\n  svalue(rb, index = TRUE) <- 2\n\n  PlotFrame = gframe(text = \"Plots\", markup = FALSE, horizontal = FALSE, container = AnalysisDef)\n  DescPlotFrame = gframe(text = \"Descriptive\", markup = FALSE, horizontal = TRUE, container = PlotFrame)\n  StemandLeaf <- gcheckbox(\"Stem-and-leaf\", container = DescPlotFrame)\n  svalue(StemandLeaf) <- FALSE\n  Histog <- gcheckbox(\"Histogram\", container = DescPlotFrame)\n  svalue(Histog) <- FALSE\n\n  BoxPlotFrame = gframe(text = \"Box Plot\", markup = FALSE, horizontal = FALSE, container = PlotFrame)\n  Boxplot <- gcheckbox(\"Draw Box PLot    \", container = BoxPlotFrame)\n  svalue(Boxplot) <- TRUE\n  Notched <- gcheckbox(\" Use Notched Box-Plots\", container = BoxPlotFrame)\n  svalue(Notched) <- FALSE\n\n  ErrorPlotFrame = gframe(text = \"Error Bar (Confidence Interval)\", markup = FALSE, horizontal = FALSE, container = PlotFrame)\n  Errplot <- gcheckbox(\"Draw Error Bar Plot\", container = ErrorPlotFrame)\n  svalue(Errplot) <- TRUE\n\n  OrganizeFrame = gframe(text = \"Organize Oupput\", markup = FALSE, horizontal = FALSE, container = PlotFrame)\n  vars <- c(\"Groups Togeteher\", \"Variables Togeteher\")\n\n  rb3 <- gradio(vars, container=OrganizeFrame)\n  Panel <- gcheckbox(\"Panel (or Separate Plots)\", container = OrganizeFrame)\n  svalue(Panel) <- TRUE\n\n  PanelFrame = gframe(text = \"Number of rows in the panel\", markup = FALSE, horizontal = TRUE, container = PlotFrame)\n  Nrows <- gspinbutton(from = 1, to = 10, by = 1, value = 3, container = PanelFrame)\n  svalue(Nrows) <- 3\n\n  RunButt <- gbutton(\"Run\", container = AnalysisDef, handler = DoExplore)\n  font(RunButt) <- list(family=\"times\",size=18, weight=\"bold\",style=\"italic\", color=\"red\")\n  size(RunButt) <- c(100, 50)\n\n  # ----------------- Means Comparison -------------------------------------\n  CompareDef <- ggroup(container = notebook, label = gettext(\"Compare\"), horizontal = FALSE)\n  NormalityFrame = gframe(text = \"Normality Tests\", markup = FALSE, horizontal = FALSE, container = CompareDef)\n  NormTest <- gcheckbox(\"Shapiro-Wilk\", container = NormalityFrame)\n  NormPlot <- gcheckbox(\"Normality plots\", container = NormalityFrame)\n  svalue(NormTest) <- TRUE\n\n  VarianceFrame = gframe(text = \"Variance Equality Tests\", markup = FALSE, horizontal = FALSE, container = CompareDef)\n  BartTest <- gcheckbox(\"Bartlett\", container = VarianceFrame)\n  svalue(BartTest) <- TRUE\n  LevTest <- gcheckbox(\"Levene\", container = VarianceFrame)\n  svalue(LevTest) <- TRUE\n\n  MeansFrame = gframe(text = \"Compare Means (Medians)\", markup = FALSE, horizontal = FALSE, container = CompareDef)\n  ParamTest <- gcheckbox(\"Parametric ( t test or ANOVA)\", container = MeansFrame)\n  svalue(ParamTest) <- TRUE\n  NonParamTest <- gcheckbox(\"Non Parametric (Mann-Whitney or Kruskal-Wallis)\", container = MeansFrame)\n  svalue(NonParamTest) <- FALSE\n\n  PostFrame = gframe(text = \"Post-Hoc tests\", markup = FALSE, horizontal = TRUE, container = CompareDef)\n  TPH =  gframe(text = \"Parametric\", markup = FALSE, horizontal = FALSE, container = PostFrame)\n  tests=c(\"none\", \"tukey\", \"sidak\", \"bonferroni\",  \"holm\", \"hochberg\", \"hommel\", \"BH\", \"BY\", \"fdr\")\n  PHT <- gcheckboxgroup(tests, container = TPH, use.table = FALSE)\n  procs=rep(FALSE, 10)\n  procs[c(2, 4)]=TRUE\n  svalue(PHT) = procs\n  # if (Toolkit == \"RGtk2\") size(PHT) <- c(220, 150)\n\n  TPH1 =  gframe(text = \"Non-Parametric (Dunn Test)\", markup = FALSE, horizontal = FALSE, container = PostFrame)\n  tests2=c(\"none\", \"bonferroni\", \"sidak\", \"holm\", \"hs\", \"hochberg\", \"bh\", \"by\")\n  PHT2 <- gcheckboxgroup(tests2, container = TPH1, use.table = FALSE)\n  procs=rep(FALSE, 8)\n  procs[c(2, 3)]=TRUE\n  svalue(PHT2) = procs\n  #if (Toolkit == \"RGtk2\") size(PHT2) <- c(220, 150)\n\n\n  Error2PlotFrame = gframe(text = \"Error Bar (Confidence Intervals with ANOVA info)\", markup = FALSE, horizontal = FALSE, container = CompareDef)\n  Errplot2 <- gcheckbox(\"Draw Error Bar Plot\", container = Error2PlotFrame)\n  svalue(Errplot2) <- TRUE\n  adj=c(\"None\", \"Sidak\", \"Bonferroni\")\n  adjpgraph=gcombobox(adj, editable = FALSE, container = Error2PlotFrame)\n\n\n  RunButtC <- gbutton(\"Run\", container = CompareDef, handler = DoCompare)\n  font(RunButtC) <- list(family=\"times\",size=18, weight=\"bold\",style=\"italic\", color=\"green\")\n  size(RunButtC) <- c(100, 50)\n\n  svalue(notebook) <- Tab\n}\n",
    "created" : 1490874995880.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1254973245",
    "id" : "8B967827",
    "lastKnownWriteTime" : 1490875382,
    "last_content_update" : 1490875382899,
    "path" : "~/Dropbox/0 ProgramasR/Paquetes/MultBiplotRGUI/R/UnivariateGUI.R",
    "project_path" : "R/UnivariateGUI.R",
    "properties" : {
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 12,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}